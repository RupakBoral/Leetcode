Q. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Approach: use MAP ds to keep track of previous elements indexes. Traverse the array and check everytime when the remaining value that we need to form the target is present or not in the map, if present insert its index and the current value and return the ans.

Soln:

  class Solution {
  public:
      vector<int> twoSum(vector<int>& nums, int target) {
          map<int, int> mp;
          vector<int> ans;
          for(int i=0; i<nums.size(); i++){
              int rem = target - nums[i];
              if(mp.find(rem) != mp.end()){
                  ans.push_back(i);
                  ans.push_back(mp[rem]);
                  return ans;
              }
              else mp[nums[i]] = i;
          }
          return ans;
      }
  };
